import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

processTestResources {
    outputs.upToDateWhen { false }
    doLast {
        def r = new File("${projectDir.path}/src/test/resources")
        def d = new File("${r}/db")
        delete d
        d.mkdirs()
        copy {
            from "${projectDir.path}/src/db"
            into "${d}"
        }
        def f = new File("${d}/cql.manifest")
        def content = ""
        FileTree tree = fileTree("${r}") { include('db/*.up.cql') }
        tree.collect().sort().each { content += (it.absolutePath - r.absolutePath) + '\n' }
        f.write content
    }
}

test {
    maxParallelForks = 1
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}


task scalaTest(dependsOn: testClasses, type: JavaExec, group: 'verification') {
    main = 'org.scalatest.tools.Runner'
    classpath = sourceSets.test.runtimeClasspath
    args = ['-R', 'build/classes/test', '-o', '-l', 'integration']
}

task scalaIntTest(dependsOn: testClasses, type: JavaExec, group: 'verification') {
    main = 'org.scalatest.tools.Runner'
    classpath = sourceSets.test.runtimeClasspath
    args = ['-R', 'build/classes/test', '-o']
}