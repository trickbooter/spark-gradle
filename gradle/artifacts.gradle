/**
 * Build the shadowjar by merging all upstream compile deps
 * Shows the com.google namespace to avoid a conflict with the
 * Spark-Cassandra connector if in use.
 * Merge service files to capture any JDBC driver files
 */
shadowJar {
    classifier "shadow"
    // Hadoop uses Guava 14.x. We need to relocate Guava in order to let spark-cassandra use 16.x Guava
    relocate 'com.google', 'shadow.com.google'
    mergeServiceFiles()
}

/**
 * Rewrite the jar manifest
 * including the git commit hash code
 */
jar {
    manifest {
        attributes(
                "Implementation-Title": "Spark-Gradle",
                "Implementation-Descritpion": "A Spark template project built using Gradle",
                "Implementation-Version": getCheckedOutGitCommitHash(),
                "Build-Timestamp": (int) (new Date().getTime() / 1000)
        )
    }
}

/**
 * Build a tar file that includes the jar and anything else you want to package
 * */
task distribution(type: Tar, dependsOn: shadowJar){
    from shadowJar.outputs.files
    from('src/conf') { into('conf') }
}

/**
 * Read the git commit from the repo.
 * You'll need to have an initial git commit for this code to work
 * @return
 */
def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd

    if (isCommit) return head[0].trim()

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim()
}
